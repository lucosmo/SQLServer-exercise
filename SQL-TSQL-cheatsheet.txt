CREATE DATABASE

CREATE DATABASE db1
CREATE DATABASE [Created Database]

DROP DATABASE

DROP DATABASE db1
DROP DATABASE [Created Database]

CREATE TABLE

CREATE TABLE Person
(
	ID INT PRIMARY KEY IDENTITY,
	FirstName nVARCHAR (50) NOT NULL,
	LastName nVARCHAR (50) NOT NULL,
	DOB DATETIME2
)

DROP TABLE

DROP TABLE Person

ALTER TABLE

ALTER TABLE Person
ADD JobTitle INT NOT NULL

ADD RELATIONSHIP

ALTER TABLE Person
ADD FOREIGN KEY (JobTitle) REFERENCES JobTitles(ID)

ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder 
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)

ALTER TABLE Person
ADD PRIMARY KEY (ID)

ALTER TABLE Person
ADD CONSTRAINT PK_Person PRIMARY KEY (ID, LastName)

ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName nVARCHAR(255) NOT NULL,
    FirstName nVARCHAR(255),
    Age INT
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
)

CREATE TABLE Orders (
    OrderID INT NOT NULL PRIMARY KEY,
    OrderNumber INT NOT NULL,
    PersonID INT FOREIGN KEY REFERENCES Persons(PersonID)
)

CREATE TABLE Orders (
    OrderID INT NOT NULL,
    OrderNumber INT NOT NULL,
    PersonID INT,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
)

UNIQUE CONSTRAINTS

ALTER TABLE Person
ADD ID EmployeeID nVARCHAR (10) UNIQUE

DEFAULT CONSTRAINTS

ALTER TABLE Person
ADD ID AddedToDatabase DATETIME2 DEFAULT GetDate()

CHECK CONSTRAINT

CREATE TABLE Persons (
    ID INT NOT NULL,
    LastName nVARCHAR(255) NOT NULL,
    FirstName nVARCHAR(255),
    Age INT CHECK (Age>=18)
)

CREATE TABLE Persons (
    ID INT NOT NULL,
    LastName nVARCHAR(255) NOT NULL,
    FirstName nVARCHAR(255),
    Age INT,
    City nVARCHAR(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
)

ALTER TABLE Persons
ADD CHECK (Age>=18)

ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes')

DROP CONSTRAINTS

ALTER TABLE Orders
DROP CONSTRAINT FK_PersonOrder

USING SELECT

SELECT * FROM Person

SELECT TOP(10) FROM Person

SELECT TOP(100) PERCENT FROM Person

SELECT ID, DOB FROM Person

FILTERING

SELECT * FROM Person
WHERE ID > 10

SELECT * FROM Person
ORDER BY DOB ASC

SELECT * FROM Person
ORDER BY DOB DESC

WILD CARDS

SELECT * FROM Person
WHERE LastName LIKE 'Smit%'

JOINS

SELECT * FROM Person
INNER JOIN JobTitles ON Person.JobTitleID = JobTitles.JobTitleID

UNION

SELECT FirstName FROM Person
UNION
SELECT FirstName FROM Customer

SELECT FirstName FROM Person
UNION ALL
SELECT FirstName FROM Customer

DISTINCT

SELECT distinct FirstName FROM Person
INNER JOIN Customer ON Person.ID = Customer.ID

GROUP BY

SELECT p.FirstName, Count(p.FirstName) FROM Person p
INNER JOIN JobTitles jt ON p.JobTitleID = jt.JobTitleID
WHERE jt.Title = 'Manager'
GROUP BY p.FirstName
ORDER BY p.FirstName

HAVING

SELECT p.FirstName, Count(p.FirstName) FROM Person p
INNER JOIN JobTitles jt ON p.JobTitleID = jt.JobTitleID
WHERE jt.Title = 'Manager'
GROUP BY p.FirstName
HAVING Count(p.FirstName)>2
ORDER BY p.FirstName

AGGREGATE

Count()
Sum()
AVG()
Min()
Max()

STRING MANIPULATION

SELECT 
    p.FirstName + ' ' + p.LastName [FULL NAME],
    FORMAT(COUNT(s.TotalValue), 'C') [TOTAL SALES],
    CONCAT(p.FirstName,' ', p.LastName) [FULL CONCAT NAME]

CTE (COMMON TABLE EXPRESSION)

--NON-RECURSIVE
WITH TopSalariedEmployees AS (
    SELECT FirstName, LastName, Salary
    FROM Employees
    WHERE Salary > 10000
)
SELECT FirstName, LastName
FROM TopSalariedEmployees

WINDOW FUNCTIONS
--Aggregate WF
SUM(), MAX(), COUNT()
--Ranking WF
RANK(), DENSE_RANK(), ROW_NUMBER()
--Valuie WF
LAG(), LEAD(), FIRST_VALUE()

Window_Function ([ALL] expression)
OVER ([PARTITION BY partition_list] [ ORDER BY order_list])

--Aggregate
SELECT OrderID,
	MAX(UnitPrice) OVER() AS MaxUnitPrice,
	MIN(UnitPrice) OVER() AS MinUnitPrice
FROM Sales.OrderDetail

SELECT OrderID,
	MAX(UnitPrice) OVER(PARTITION BY OrderID) AS UnitPrice
FROM Sales.OrderDetail

SELECT OrderID,
	SUM(UnitPrice) OVER(PARTITION BY OrderID)
FROM Sales.OrderDetail

--Ranking
SELECT OrderID,
	ROW_NUMBER() OVER () AS [RowCount]
FROM Sales.OrderDetail

ISNULL

ISNULL(expression, value)
IF EXPRESSION IS NULL, USES VALUE

COALESCE (ANSI)

COALESCE(expression1, expression2, ...) 
RETURNS 1ST NON-NULL EXPRESSION